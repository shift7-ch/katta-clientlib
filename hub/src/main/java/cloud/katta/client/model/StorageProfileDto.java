/*
 * Copyright (c) 2025 shift7 GmbH. All rights reserved.
 */

/*
 * hub-backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.katta.client.model;

import java.util.Map;
import java.util.HashMap;

import cloud.katta.client.JSON;

import com.fasterxml.jackson.core.type.TypeReference;

import javax.ws.rs.core.GenericType;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;

@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
@JsonDeserialize(using = StorageProfileDto.StorageProfileDtoDeserializer.class)
@JsonSerialize(using = StorageProfileDto.StorageProfileDtoSerializer.class)
public class StorageProfileDto extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(StorageProfileDto.class.getName());

    public static class StorageProfileDtoSerializer extends StdSerializer<StorageProfileDto> {
        public StorageProfileDtoSerializer(Class<StorageProfileDto> t) {
            super(t);
        }

        public StorageProfileDtoSerializer() {
            this(null);
        }

        @Override
        public void serialize(StorageProfileDto value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class StorageProfileDtoDeserializer extends StdDeserializer<StorageProfileDto> {
        public StorageProfileDtoDeserializer() {
            this(StorageProfileDto.class);
        }

        public StorageProfileDtoDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public StorageProfileDto deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            StorageProfileDto newStorageProfileDto = new StorageProfileDto();
            Map<String, Object> result2 = tree.traverse(jp.getCodec()).readValueAs(new TypeReference<Map<String, Object>>() {});
            String discriminatorValue = (String)result2.get("protocol");
            switch (discriminatorValue) {
                case "S3":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(StorageProfileS3Dto.class);
                    newStorageProfileDto.setActualInstance(deserialized);
                    return newStorageProfileDto;
                case "S3STS":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(StorageProfileS3STSDto.class);
                    newStorageProfileDto.setActualInstance(deserialized);
                    return newStorageProfileDto;
                case "StorageProfileS3Dto":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(StorageProfileS3Dto.class);
                    newStorageProfileDto.setActualInstance(deserialized);
                    return newStorageProfileDto;
                case "StorageProfileS3STSDto":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(StorageProfileS3STSDto.class);
                    newStorageProfileDto.setActualInstance(deserialized);
                    return newStorageProfileDto;
                default:
                    log.log(Level.WARNING, String.format("Failed to lookup discriminator value `%s` for StorageProfileDto. Possible values: S3 S3STS StorageProfileS3Dto StorageProfileS3STSDto", discriminatorValue));
            }

            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize StorageProfileS3Dto
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(StorageProfileS3Dto.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'StorageProfileS3Dto'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'StorageProfileS3Dto'", e);
            }

            // deserialize StorageProfileS3STSDto
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(StorageProfileS3STSDto.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'StorageProfileS3STSDto'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'StorageProfileS3STSDto'", e);
            }

            if (match == 1) {
                StorageProfileDto ret = new StorageProfileDto();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for StorageProfileDto: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public StorageProfileDto getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "StorageProfileDto cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType<?>> schemas = new HashMap<>();

    public StorageProfileDto() {
        super("oneOf", Boolean.FALSE);
    }

    public StorageProfileDto(StorageProfileS3Dto o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public StorageProfileDto(StorageProfileS3STSDto o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("StorageProfileS3Dto", new GenericType<StorageProfileS3Dto>() {
        });
        schemas.put("StorageProfileS3STSDto", new GenericType<StorageProfileS3STSDto>() {
        });
        JSON.registerDescendants(StorageProfileDto.class, Collections.unmodifiableMap(schemas));
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<>();
        mappings.put("S3", StorageProfileS3Dto.class);
        mappings.put("S3STS", StorageProfileS3STSDto.class);
        mappings.put("StorageProfileS3Dto", StorageProfileS3Dto.class);
        mappings.put("StorageProfileS3STSDto", StorageProfileS3STSDto.class);
        mappings.put("StorageProfileDto", StorageProfileDto.class);
        JSON.registerDiscriminator(StorageProfileDto.class, "protocol", mappings);
    }

    @Override
    public Map<String, GenericType<?>> getSchemas() {
        return StorageProfileDto.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * StorageProfileS3Dto, StorageProfileS3STSDto
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(StorageProfileS3Dto.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(StorageProfileS3STSDto.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be StorageProfileS3Dto, StorageProfileS3STSDto");
    }

    /**
     * Get the actual instance, which can be the following:
     * StorageProfileS3Dto, StorageProfileS3STSDto
     *
     * @return The actual instance (StorageProfileS3Dto, StorageProfileS3STSDto)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `StorageProfileS3Dto`. If the actual instance is not `StorageProfileS3Dto`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `StorageProfileS3Dto`
     * @throws ClassCastException if the instance is not `StorageProfileS3Dto`
     */
    public StorageProfileS3Dto getStorageProfileS3Dto() throws ClassCastException {
        return (StorageProfileS3Dto)super.getActualInstance();
    }

    /**
     * Get the actual instance of `StorageProfileS3STSDto`. If the actual instance is not `StorageProfileS3STSDto`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `StorageProfileS3STSDto`
     * @throws ClassCastException if the instance is not `StorageProfileS3STSDto`
     */
    public StorageProfileS3STSDto getStorageProfileS3STSDto() throws ClassCastException {
        return (StorageProfileS3STSDto)super.getActualInstance();
    }

}

