/*
 * hub-backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.iterate.hub.client.model;

import javax.ws.rs.core.GenericType;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import ch.iterate.hub.client.JSON;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;

@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonDeserialize(using = AuthorityDto.AuthorityDtoDeserializer.class)
@JsonSerialize(using = AuthorityDto.AuthorityDtoSerializer.class)
public class AuthorityDto extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AuthorityDto.class.getName());

    public static class AuthorityDtoSerializer extends StdSerializer<AuthorityDto> {
        public AuthorityDtoSerializer(Class<AuthorityDto> t) {
            super(t);
        }

        public AuthorityDtoSerializer() {
            this(null);
        }

        @Override
        public void serialize(AuthorityDto value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class AuthorityDtoDeserializer extends StdDeserializer<AuthorityDto> {
        public AuthorityDtoDeserializer() {
            this(AuthorityDto.class);
        }

        public AuthorityDtoDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public AuthorityDto deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            AuthorityDto newAuthorityDto = new AuthorityDto();
            Map<String, Object> result2 = tree.traverse(jp.getCodec()).readValueAs(new TypeReference<Map<String, Object>>() {
            });
            String discriminatorValue = (String) result2.get("type");
            switch(discriminatorValue) {
                case "GROUP":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(GroupDto.class);
                    newAuthorityDto.setActualInstance(deserialized);
                    return newAuthorityDto;
                case "GroupDto":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(GroupDto.class);
                    newAuthorityDto.setActualInstance(deserialized);
                    return newAuthorityDto;
                case "MEMBER":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(MemberDto.class);
                    newAuthorityDto.setActualInstance(deserialized);
                    return newAuthorityDto;
                case "MemberDto":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(MemberDto.class);
                    newAuthorityDto.setActualInstance(deserialized);
                    return newAuthorityDto;
                case "USER":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(UserDto.class);
                    newAuthorityDto.setActualInstance(deserialized);
                    return newAuthorityDto;
                case "UserDto":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(UserDto.class);
                    newAuthorityDto.setActualInstance(deserialized);
                    return newAuthorityDto;
                default:
                    log.log(Level.WARNING, String.format("Failed to lookup discriminator value `%s` for AuthorityDto. Possible values: GROUP GroupDto MEMBER MemberDto USER UserDto", discriminatorValue));
            }

            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize GroupDto
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if(GroupDto.class.equals(Integer.class) || GroupDto.class.equals(Long.class) || GroupDto.class.equals(Float.class) || GroupDto.class.equals(Double.class) || GroupDto.class.equals(Boolean.class) || GroupDto.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if(!attemptParsing) {
                        attemptParsing |= ((GroupDto.class.equals(Integer.class) || GroupDto.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((GroupDto.class.equals(Float.class) || GroupDto.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (GroupDto.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (GroupDto.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if(attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(GroupDto.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'GroupDto'");
                }
            }
            catch(Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'GroupDto'", e);
            }

            // deserialize MemberDto
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if(MemberDto.class.equals(Integer.class) || MemberDto.class.equals(Long.class) || MemberDto.class.equals(Float.class) || MemberDto.class.equals(Double.class) || MemberDto.class.equals(Boolean.class) || MemberDto.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if(!attemptParsing) {
                        attemptParsing |= ((MemberDto.class.equals(Integer.class) || MemberDto.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((MemberDto.class.equals(Float.class) || MemberDto.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (MemberDto.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (MemberDto.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if(attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(MemberDto.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'MemberDto'");
                }
            }
            catch(Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'MemberDto'", e);
            }

            // deserialize UserDto
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if(UserDto.class.equals(Integer.class) || UserDto.class.equals(Long.class) || UserDto.class.equals(Float.class) || UserDto.class.equals(Double.class) || UserDto.class.equals(Boolean.class) || UserDto.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if(!attemptParsing) {
                        attemptParsing |= ((UserDto.class.equals(Integer.class) || UserDto.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((UserDto.class.equals(Float.class) || UserDto.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (UserDto.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (UserDto.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if(attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(UserDto.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'UserDto'");
                }
            }
            catch(Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'UserDto'", e);
            }

            if(match == 1) {
                AuthorityDto ret = new AuthorityDto();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for AuthorityDto: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public AuthorityDto getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "AuthorityDto cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public AuthorityDto() {
        super("oneOf", Boolean.FALSE);
    }

    public AuthorityDto(GroupDto o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AuthorityDto(MemberDto o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AuthorityDto(UserDto o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("GroupDto", new GenericType<GroupDto>() {
        });
        schemas.put("MemberDto", new GenericType<MemberDto>() {
        });
        schemas.put("UserDto", new GenericType<UserDto>() {
        });
        JSON.registerDescendants(AuthorityDto.class, Collections.unmodifiableMap(schemas));
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("GROUP", GroupDto.class);
        mappings.put("GroupDto", GroupDto.class);
        mappings.put("MEMBER", MemberDto.class);
        mappings.put("MemberDto", MemberDto.class);
        mappings.put("USER", UserDto.class);
        mappings.put("UserDto", UserDto.class);
        mappings.put("AuthorityDto", AuthorityDto.class);
        JSON.registerDiscriminator(AuthorityDto.class, "type", mappings);
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return AuthorityDto.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * GroupDto, MemberDto, UserDto
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if(JSON.isInstanceOf(GroupDto.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if(JSON.isInstanceOf(MemberDto.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if(JSON.isInstanceOf(UserDto.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be GroupDto, MemberDto, UserDto");
    }

    /**
     * Get the actual instance, which can be the following:
     * GroupDto, MemberDto, UserDto
     *
     * @return The actual instance (GroupDto, MemberDto, UserDto)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `GroupDto`. If the actual instance is not `GroupDto`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GroupDto`
     * @throws ClassCastException if the instance is not `GroupDto`
     */
    public GroupDto getGroupDto() throws ClassCastException {
        return (GroupDto) super.getActualInstance();
    }

    /**
     * Get the actual instance of `MemberDto`. If the actual instance is not `MemberDto`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MemberDto`
     * @throws ClassCastException if the instance is not `MemberDto`
     */
    public MemberDto getMemberDto() throws ClassCastException {
        return (MemberDto) super.getActualInstance();
    }

    /**
     * Get the actual instance of `UserDto`. If the actual instance is not `UserDto`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserDto`
     * @throws ClassCastException if the instance is not `UserDto`
     */
    public UserDto getUserDto() throws ClassCastException {
        return (UserDto) super.getActualInstance();
    }

}

