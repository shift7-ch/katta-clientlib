services:
  keycloak:
    profiles: [ local ]
    image: "${KATTA_KEYCLOAK_IMAGE}"
    pull_policy: missing
    ports:
      - "${KEYCLOAK_HTTP_PORT:-1}:${KEYCLOAK_HTTP_PORT:-1}"
      - "${KEYCLOAK_HTTPS_PORT:-1}:8443"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      PROXY_ADDRESS_FORWARDING: "true"
      KEYCLOAK_LOGLEVEL: DEBUG
      DB_VENDOR: h2
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KC_HTTPS_CERTIFICATE_FILE: /opt/keycloak/dev/certs/keycloak-server.crt.pem
      KC_HTTPS_CERTIFICATE_KEY_FILE: /opt/keycloak/dev/certs/keycloak-server.key.pem
    volumes:
      # renamed because of https://github.com/keycloak/keycloak/issues/37569
      - ./keycloak/dev-realm.json:/opt/keycloak/data/import/keycloak.json
      - ./certs:/opt/keycloak/dev/certs
    # hub to Keycloak communication inside Docker network (http://keycloak:8180) goes to the container internal port! Therefore, we need to start keycloak with the same port `--http-port 8180`
    command: start-dev --import-realm --db=dev-mem --health-enabled=true --hostname ${KEYCLOAK_HOSTNAME} --http-port ${KEYCLOAK_HTTP_PORT}
    healthcheck:
      test: [ "CMD", "bash", "-c", "curl -v --fail http://127.0.0.1:${KEYCLOAK_HTTP_PORT}/realms/cryptomator/.well-known/openid-configuration" ]
      interval: 5s
      timeout: 10s
      retries: 15


  keycloak-enable-direct-access-grant:
    profiles: [ local ]
    image: "${KATTA_KEYCLOAK_IMAGE}"
    pull_policy: missing
    entrypoint: [ "/bin/bash","-c" ]
    command:
      - |
        set -euxo pipefail

        # fix for Docker Desktop 4.42.1 based on https://github.com/keycloak/keycloak/discussions/12155
        /opt/keycloak/bin/kcadm.sh update --server http://keycloak:${KEYCLOAK_HTTP_PORT} --realm master --user admin --password admin realms/master -s sslRequired=NONE
        /opt/keycloak/bin/kcadm.sh update --server http://keycloak:${KEYCLOAK_HTTP_PORT} --realm cryptomator --user admin --password admin realms/cryptomator -s sslRequired=NONE

        # enable direct access grants in client cryptomator and cryptomatorhub for integration testing and manual exploration
        CLIENT_ID=`/opt/keycloak/bin/kcadm.sh get clients --server http://keycloak:${KEYCLOAK_HTTP_PORT} --realm cryptomator --user admin --password admin   --fields id -q clientId=cryptomator | grep "id" | sed -e 's/.*"id" : //g' | sed -e 's/"//g'`
        /opt/keycloak/bin/kcadm.sh update clients/$$CLIENT_ID --server http://keycloak:${KEYCLOAK_HTTP_PORT} --realm cryptomator --user admin --password admin  -s "directAccessGrantsEnabled=true"
        CLIENT_ID=`/opt/keycloak/bin/kcadm.sh get clients --server http://keycloak:${KEYCLOAK_HTTP_PORT} --realm cryptomator --user admin --password admin   --fields id -q clientId=cryptomatorhub | grep "id" | sed -e 's/.*"id" : //g' | sed -e 's/"//g'`
        /opt/keycloak/bin/kcadm.sh update clients/$$CLIENT_ID --server http://keycloak:${KEYCLOAK_HTTP_PORT} --realm cryptomator --user admin --password admin  -s "directAccessGrantsEnabled=true"
        # allow redirect URI from localhost for "attended" mode for client cryptomatorhub, i.e. dev wants to interact directly with the running setup
        CLIENT_ID_CRYPTOMATORHUB=`/opt/keycloak/bin/kcadm.sh get clients --server http://keycloak:${KEYCLOAK_HTTP_PORT} --realm cryptomator --user admin --password admin   --fields id -q clientId=cryptomatorhub | grep "id" | sed -e 's/.*"id" : //g' | sed -e 's/"//g'`
        /opt/keycloak/bin/kcadm.sh update clients/$$CLIENT_ID_CRYPTOMATORHUB --server http://keycloak:${KEYCLOAK_HTTP_PORT} --realm cryptomator --user admin --password admin  -s 'redirectUris=["http://localhost:${HUB_PORT}/*"]'

    depends_on:
      keycloak:
        condition: service_healthy

  keycloak-ready:
    image: nginx
    volumes:
      - ./docker/nginx/keycloak.conf.template:/etc/nginx/conf.d/keycloak.conf.template:ro
    entrypoint: [ "/bin/bash","-c" ]
    command:
      - |
        set -euxo pipefail

        apt-get update && apt-get install -y wget

        if [ -n "${KEYCLOAK_HOSTNAME}" ]; then
          # inject ports
          export KEYCLOAK_HTTP_PORT=${KEYCLOAK_HTTP_PORT}
          # see https://stackoverflow.com/questions/56649582/substitute-environment-variables-in-nginx-config-from-docker-compose
          # see https://www.baeldung.com/linux/envsubst-command
          # https://stackoverflow.com/questions/24963705/is-there-an-escape-character-for-envsubst
          envsubst < /etc/nginx/conf.d/keycloak.conf.template >> /etc/nginx/conf.d/default.conf
          cat /etc/nginx/conf.d/default.conf
          # reload and verify configuration
          nginx -t
          # start reverse proxy to keycloak and hub
          nginx
        fi

        until wget -q -O- ${HUB_KEYCLOAK_URL}${HUB_KEYCLOAK_BASEPATH}/realms/${HUB_KEYCLOAK_REALM}/.well-known/openid-configuration >/dev/null 2>&1; do sleep 1; done
    healthcheck:
      test: [ "CMD-SHELL", "exit 0" ]
      interval: 10s
      timeout: 1s
      retries: 15

  postgres:
    image:
      docker.io/postgres:14
    environment:
      # extracted from running container started with mvn quarkus:dev
      - POSTGRES_USER=quarkus
      - POSTGRES_PASSWORD=quarkus
      - POSTGRES_DB=quarkus
      - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/postgresql/14/bin
      - GOSU_VERSION=1.16
      - LANG=en_US.utf8
      - PG_MAJOR=14
      - PG_VERSION=14.7-1.pgdg110+1
      - PGDATA=/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U quarkus -d quarkus'" ]
      interval: 10s
      timeout: 3s
      retries: 3

  minio:
    build:
      dockerfile: docker/minio/Dockerfile
    depends_on:
      keycloak-ready:
        condition: service_completed_successfully
    restart: on-failure
    ports:
      - "${MINIO_PORT}:${MINIO_PORT}"
      - "${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      KEYCLOAK_HTTP_PORT: ${KEYCLOAK_HTTP_PORT}
    healthcheck:
      test: [ "CMD", "bash", "-c", "curl -v --fail 127.0.0.1:${MINIO_PORT}/minio/health/ready" ]
      interval: 5s
      timeout: 1s
      retries: 5
    volumes:
      - ./docker/nginx/keycloak.conf.template:/etc/nginx/conf.d/keycloak.conf.template:ro
    entrypoint: [ "/bin/bash","-c" ]
    command:
      - |
        set -euxo pipefail

        if [ -n "${KEYCLOAK_HOSTNAME}" ]; then
          # inject ports
          # see https://stackoverflow.com/questions/56649582/substitute-environment-variables-in-nginx-config-from-docker-compose
          # see https://www.baeldung.com/linux/envsubst-command
          # https://stackoverflow.com/questions/24963705/is-there-an-escape-character-for-envsubst
          envsubst < /etc/nginx/conf.d/keycloak.conf.template >> /etc/nginx/conf.d/default.conf
          cat /etc/nginx/conf.d/default.conf
          # reload and verify configuration
          nginx -t
          # start reverse proxy to keycloak
          systemctl start nginx.service
          # verify reverse proxy
          curl --fail http://localhost:${KEYCLOAK_HTTP_PORT}/realms/cryptomator/.well-known/openid-configuration
          curl --fail http://127.0.0.1:${KEYCLOAK_HTTP_PORT}/realms/cryptomator/.well-known/openid-configuration
        fi

        /minio server /data --address :${MINIO_PORT} --console-address :${MINIO_CONSOLE_PORT}

  minio_setup:
    build:
      dockerfile: docker/minio_setup/Dockerfile
    depends_on:
      minio:
        condition: service_healthy
      keycloak-ready:
        condition: service_completed_successfully
    volumes:
      - ./setup:/setup
      - ./docker/nginx/keycloak.conf.template:/etc/nginx/conf.d/keycloak.conf.template:ro
    environment:
      KEYCLOAK_HTTP_PORT: ${KEYCLOAK_HTTP_PORT}
      KEYCLOAK_HOSTNAME: ${KEYCLOAK_HOSTNAME}
    entrypoint: [ "/bin/bash","-c" ]
    command:
      - |
        set -euxo pipefail

        if [ -n "${KEYCLOAK_HOSTNAME}" ]; then
          # inject ports
          # see https://stackoverflow.com/questions/56649582/substitute-environment-variables-in-nginx-config-from-docker-compose
          # see https://www.baeldung.com/linux/envsubst-command
          # https://stackoverflow.com/questions/24963705/is-there-an-escape-character-for-envsubst
          envsubst < /etc/nginx/conf.d/keycloak.conf.template >> /etc/nginx/conf.d/default.conf
          cat /etc/nginx/conf.d/default.conf
          # reload and verify configuration
          nginx -t
          # start reverse proxy to keycloak
          systemctl start nginx.service
          # verify reverse proxy
          curl --fail http://localhost:${KEYCLOAK_HTTP_PORT}/realms/cryptomator/.well-known/openid-configuration
          curl --fail http://127.0.0.1:${KEYCLOAK_HTTP_PORT}/realms/cryptomator/.well-known/openid-configuration
        fi

        ls /setup
        /mc config host add myminio http://minio:${MINIO_PORT} minioadmin minioadmin

        /mc admin policy create myminio cipherduckcreatebucket /setup/local/minio_sts/createbucketpolicy.json
        /mc admin policy create myminio cipherduckaccessbucket /setup/local/minio_sts/accessbucketpolicy.json


        /mc idp openid add myminio cryptomator \
          config_url="${HUB_KEYCLOAK_URL}${HUB_KEYCLOAK_BASEPATH}/realms/${HUB_KEYCLOAK_REALM}/.well-known/openid-configuration" \
          client_id="cryptomator" \
          client_secret="ignore-me" \
          role_policy="cipherduckcreatebucket"
        /mc idp openid add myminio cryptomatorhub \
          config_url="${HUB_KEYCLOAK_URL}${HUB_KEYCLOAK_BASEPATH}/realms/${HUB_KEYCLOAK_REALM}/.well-known/openid-configuration" \
          client_id="cryptomatorhub" \
          client_secret="ignore-me" \
          role_policy="cipherduckcreatebucket"
        /mc idp openid add myminio cryptomatorvaults \
          config_url="${HUB_KEYCLOAK_URL}${HUB_KEYCLOAK_BASEPATH}/realms/${HUB_KEYCLOAK_REALM}/.well-known/openid-configuration" \
          client_id="cryptomatorvaults" \
          client_secret="ignore-me" \
          role_policy="cipherduckaccessbucket"

        # see https://github.com/bitnami/charts/pull/28118
        /mc admin service restart myminio --wait --json
        # sleep necessary despite --wait...
        sleep 5

        /mc idp openid enable myminio cryptomator
        /mc idp openid enable myminio cryptomatorhub
        /mc idp openid enable myminio cryptomatorvaults

        /mc admin service restart myminio --wait --json
        sleep 5

        /mc idp openid ls myminio
        /mc idp openid info myminio

        /mc admin user add myminio handmade_access top-secret
        /mc admin policy create myminio handmade_accesspolicy /setup/local/minio_static/handmade_accessbucketpolicy.json
        /mc admin policy create myminio handmade_createpolicy /setup/local/minio_static/handmade_createbucketpolicy.json
        /mc admin policy attach myminio handmade_accesspolicy --user handmade_access
        /mc admin policy attach myminio handmade_createpolicy --user handmade_access

        echo "Completed MinIO Setup"

  hub:
    build:
      dockerfile: docker/hub/Dockerfile
      args:
        KATTA_SERVER_IMAGE: "${KATTA_SERVER_IMAGE}"
    depends_on:
      keycloak-ready:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "bash", "-c", "curl -v --fail 127.0.0.1:${HUB_PORT}/api/config" ]
      interval: 5s
      timeout: 1s
      retries: 5
    environment:
      QUARKUS_PROFILE: dev
      QUARKUS_HTTP_PORT: ${HUB_PORT}
      QUARKUS_OIDC_AUTH_SERVER_URL: ${HUB_KEYCLOAK_URL}${HUB_KEYCLOAK_BASEPATH}/realms/${HUB_KEYCLOAK_REALM}
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/quarkus
      QUARKUS_DATASOURCE_USERNAME: quarkus
      QUARKUS_DATASOURCE_PASSWORD: quarkus
      QUARKUS_LOG_LEVEL: DEBUG
      # allow calls from frontend localhost:8280 to keycloak:8380 and minio:9000 when using interactively (attended),
      # dev-ui needs very permissive CSP:
      QUARKUS_HTTP_HEADER__CONTENT_SECURITY_POLICY__VALUE: "default-src 'self' 'unsafe-inline' 'unsafe-eval' blob: data:; connect-src 'self'  ${MINIO_HOSTNAME}:${MINIO_PORT} ${HUB_KEYCLOAK_URL}; object-src 'none'; child-src 'self'; img-src * data:; frame-ancestors 'none'"
      QUARKUS_SWAGGER_UI_ALWAYS_INCLUDE: true
      QUARKUS_SWAGGER_UI_ENABLE: true
      QUARKUS_SWAGGER_UI_OAUTH_USE_PKCE_WITH_AUTHORIZATION_CODE_GRANT: true
      QUARKUS_SWAGGER_UI_TITLE: Katta Server API
      QUARKUS_SWAGGER_UI_PREAUTHORIZE_BASIC_USERNAME: admin
      QUARKUS_SWAGGER_UI_PREAUTHORIZE_BASIC_PASSWORD: admin

      HUB_KEYCLOAK_PUBLIC_URL: ${HUB_KEYCLOAK_URL}${HUB_KEYCLOAK_BASEPATH}
      HUB_KEYCLOAK_LOCAL_URL: ${HUB_KEYCLOAK_URL}${HUB_KEYCLOAK_BASEPATH}
      HUB_KEYCLOAK_REALM: ${HUB_KEYCLOAK_REALM}
      HUB_KEYCLOAK_SYSTEM_CLIENT_ID: cryptomatorhub-system
      HUB_KEYCLOAK_SYSTEM_CLIENT_SECRET: ${HUB_KEYCLOAK_SYSTEM_CLIENT_SECRET}
      HUB_KEYCLOAK_OIDC_CRYPTOMATOR_CLIENT_ID: cryptomator
      HUB_KEYCLOAK_OIDC_CRYPTOMATOR_VAULTS_CLIENT_SECRET: ${HUB_KEYCLOAK_OIDC_CRYPTOMATOR_VAULTS_CLIENT_SECRET}
      AWS_REGION: us-east-1
    ports:
      - "${HUB_PORT}:${HUB_PORT}"
    volumes:
      - ./docker/nginx/keycloak.conf.template:/etc/nginx/conf.d/keycloak.conf.template:ro
      - ./docker/nginx/minio.conf.template:/etc/nginx/conf.d/minio.conf.template:ro
    entrypoint: [ "/bin/bash","-c" ]
    command:
      - |
        set -euxo pipefail

        if [ -n "${KEYCLOAK_HOSTNAME}" ]; then
          # inject ports
          export KEYCLOAK_HTTP_PORT=${KEYCLOAK_HTTP_PORT}

          # see https://stackoverflow.com/questions/56649582/substitute-environment-variables-in-nginx-config-from-docker-compose
          # see https://www.baeldung.com/linux/envsubst-command
          # https://stackoverflow.com/questions/24963705/is-there-an-escape-character-for-envsubst
          envsubst < /etc/nginx/conf.d/keycloak.conf.template >> /etc/nginx/conf.d/default.conf
          cat /etc/nginx/conf.d/default.conf
          # reload and verify configuration
          nginx -t
          # start reverse proxy to keycloak and minio
          nginx
          # verify reverse proxy
          curl --fail http://localhost:${KEYCLOAK_HTTP_PORT}/realms/cryptomator/.well-known/openid-configuration
          curl --fail http://127.0.0.1:${KEYCLOAK_HTTP_PORT}/realms/cryptomator/.well-known/openid-configuration
        fi

        # inject ports
        export MINIO_PORT=${MINIO_PORT}

        # see https://stackoverflow.com/questions/56649582/substitute-environment-variables-in-nginx-config-from-docker-compose
        # see https://www.baeldung.com/linux/envsubst-command
        # https://stackoverflow.com/questions/24963705/is-there-an-escape-character-for-envsubst
        envsubst < /etc/nginx/conf.d/minio.conf.template >> /etc/nginx/conf.d/default.conf
        cat /etc/nginx/conf.d/default.conf
        # reload and verify configuration
        nginx -t
        # start reverse proxy to keycloak and minio
        nginx -s reload || nginx
        # skip verify reverse proxy (MinIO might not be up yet).
        #        curl --fail http://localhost:${MINIO_PORT}/minio/health/ready
        #        curl --fail http://127.0.0.1:${MINIO_PORT}/minio/health/ready


        java  -Djava.util.logging.manager=org.jboss.logmanager.LogManager -jar quarkus-run.jar

  hub_setup_storage_profile:
    profiles: [ demo ]
    build:
      dockerfile: docker/hub_setup_storage_profile/Dockerfile
    depends_on:
      keycloak-ready:
        condition: service_completed_successfully
      hub:
        condition: service_healthy
    volumes:
      - ./setup:/setup
      - ./docker/nginx/keycloak.conf.template:/etc/nginx/conf.d/keycloak.conf.template:ro
      - ./docker/nginx/hub.conf.template:/etc/nginx/conf.d/hub.conf.template:ro
    entrypoint: [ "/bin/bash","-c" ]
    environment:
      KEYCLOAK_HTTP_PORT: ${KEYCLOAK_HTTP_PORT}
      HUB_PORT: ${HUB_PORT}
    command:
      - |
        set -euxo pipefail

        if [ -n "${KEYCLOAK_HOSTNAME}" ]; then
          # inject ports
          # see https://stackoverflow.com/questions/56649582/substitute-environment-variables-in-nginx-config-from-docker-compose
          # see https://www.baeldung.com/linux/envsubst-command
          # https://stackoverflow.com/questions/24963705/is-there-an-escape-character-for-envsubst
          envsubst < /etc/nginx/conf.d/keycloak.conf.template >> /etc/nginx/conf.d/default.conf
          cat /etc/nginx/conf.d/default.conf
          # reload and verify configuration
          nginx -t
          # start reverse proxy to keycloak and hub
          nginx -s quit || true
          nginx
        fi


        # inject ports
        # see https://stackoverflow.com/questions/56649582/substitute-environment-variables-in-nginx-config-from-docker-compose
        # see https://www.baeldung.com/linux/envsubst-command
        # https://stackoverflow.com/questions/24963705/is-there-an-escape-character-for-envsubst
        envsubst < /etc/nginx/conf.d/hub.conf.template >> /etc/nginx/conf.d/default.conf
        cat /etc/nginx/conf.d/default.conf
        # reload and verify configuration
        nginx -t
        # start reverse proxy to keycloak and hub
        nginx -s quit || true
        nginx

        ls /setup
        curl --version
        curl -v --fail -X POST ${HUB_KEYCLOAK_URL}${HUB_KEYCLOAK_BASEPATH}/realms/${HUB_KEYCLOAK_REALM}/protocol/openid-connect/token \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "client_id=cryptomator" \
              -d "grant_type=password" \
              -d "username=${HUB_ADMIN_USER}" \
              -d "password=${HUB_ADMIN_PASSWORD}" > /tmp/access_token.txt
        cat /tmp/access_token.txt
        export ACCESS_TOKEN=`cat /tmp/access_token.txt | jq ".access_token" | tr -d '"'`

        echo $$ACCESS_TOKEN

        cat /setup/local/minio_sts/minio_sts_profile.json | sed -e 's/9000/${MINIO_PORT}/g' | sed -e 's/"minio"/"${MINIO_HOSTNAME}"/g'  | sed -e 's|http://minio|http://${MINIO_HOSTNAME}|g'  > /tmp/minio_sts_profile.json
        cat /setup/local/minio_static/minio_static_profile.json | sed -e 's/9000/${MINIO_PORT}/g' | sed -e 's/"minio"/"${MINIO_HOSTNAME}"/g' | sed -e 's|http://minio|http://${MINIO_HOSTNAME}|g'  > /tmp/minio_static_profile.json

        curl -v --fail -X PUT http://localhost:${HUB_PORT}/api/storageprofile/s3sts -d @/tmp/minio_sts_profile.json -H "Content-Type: application/json" -H "Authorization: Bearer $$ACCESS_TOKEN"
        curl -v --fail -X PUT http://localhost:${HUB_PORT}/api/storageprofile/s3 -d @/tmp/minio_static_profile.json -H "Content-Type: application/json" -H "Authorization: Bearer $$ACCESS_TOKEN"
        curl -v --fail -X PUT http://localhost:${HUB_PORT}/api/storageprofile/s3sts -d @setup/local/aws_sts/aws_sts_profile.json -H "Content-Type: application/json" -H "Authorization: Bearer $$ACCESS_TOKEN"
        curl -v --fail -X PUT http://localhost:${HUB_PORT}/api/storageprofile/s3 -d @setup/local/aws_static/aws_static_profile.json -H "Content-Type: application/json" -H "Authorization: Bearer $$ACCESS_TOKEN"
        curl -v --fail http://localhost:${HUB_PORT}/api/storageprofile/ -H "Authorization: Bearer $$ACCESS_TOKEN"
        echo "createbuckets successful"


